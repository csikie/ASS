@{
    Layout = "_MainLayout";
}

@using ASS.WEB.Models.DTOs
@model List<CourseDTO> 

<link rel="stylesheet" href="~/css/site.css"/>

<div class="container">
    <div class="row justify-content-md-between">
        <div class="col-lg-12">
            <h2>@localizer["EvalTableTitle"]</h2>
            <hr />
        </div>
        <div class="col-lg-12">
            @for (int i = 0; i < Model.Count; i++)
            {
                <h5>@($"{Model[i].SubjectName} - {Model[i].CourseName}")</h5>
                <div class="table-responsive mb-5" role="region" aria-labelledby="caption-@i" tabindex="0">
                    <table class="sticky-table">
                        <thead>
                            <tr>
                                <th scope="col">@localizer["StudentNameTableHeader"]</th>
                                @for (int k = 0; k < Model[i].Assignments.Count; k++)
                                {
                                    <th class="text-center" scope="col">@Model[i].Assignments[k].Name</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (int k = 0; k < Model[i].Students.Count; k++)
                            {
                            <tr>
                                <th scope="row">@($"{Model[i].Students[k].RealName} ({Model[i].Students[k].UserName})")</th>
                                @{

                                    for (int j = 0; j < Model[i].Assignments.Count; j++)
                                    {
                                        var list = Model[i].Assignments[j].Solutions.Join(Model[i].Students[k].Solutions,
                                                                                          solutionA => solutionA.Id,
                                                                                          solutionB => solutionB.Id,
                                                                                          (solutionA, solutionB) => new { Solution = solutionA })
                                                                                    .Select(x => x.Solution)
                                                                                    .ToList();
                                        if (list.Count > 0 && list.All(x => string.IsNullOrEmpty(x.Grade)))
                                        {
                                            <td><a href="Instructor/EvaluateAssignment/?course=@Model[i].Id&assignment=@Model[i].Assignments[j].Id&student=@Model[i].Students[k].Id" class="link-secondary fs-3"><i class="fas fa-square"></i></a></td>
                                        }
                                        else if (list.Count > 0 && !list.All(x => string.IsNullOrEmpty(x.Grade)))
                                        {
                                            <td><a href="Instructor/EvaluateAssignment/?course=@Model[i].Id&assignment=@Model[i].Assignments[j].Id&student=@Model[i].Students[k].Id" class="link-success fs-3"><i class="fas fa-check-circle"></i></a></td>
                                        }
                                    }
                                }
                            </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    <div class="row justify-content-md-between">
        <div class="col-lg-12">
            <h1>@localizer["StudentPendingListTitle"]</h1>
            <hr />
        </div>
        <div class="col-lg-12">
            <div id="pendingListGrid"></div>
            <script>
                $(document).ready(function () {
                    const grid = $("#pendingListGrid").kendoGrid({
                        dataSource: {
                            transport: {
                                read: {
                                    dataType: "json",
                                    url: "@Url.Action("GetPendingList","Instructor")",
                                },
                                parameterMap: function (options, operation) {
                                    if (operation !== "read" && options.models) {
                                        return { models: kendo.stringify(options.models) };
                                    }
                                }
                            },
                            pageSize: 2,
                            group: { field: "SubjectName", dir: "asc" },
                            schema: {
                                model: {
                                    id: "UserCourseId",
                                    fields: {
                                        UserCourseId: { type : "int" },
                                        StudentName: { type: "string" },
                                        StudentNeptunCode: { type: "string" },
                                        CourseName: { type: "string" },
                                        SubjectName: { type: "string" }
                                    },
                                },
                            }
                        },
                        pageable: {
                            refresh: true,
                            buttonCount : 5
                        },
                        toolbar: ["search"],
                        height: 550,
                        columns: [
                            {
                                field: "SubjectName",
                                title: "",
                                groupHeaderTemplate: "#= value #",
                                hidden: true,
                            },
                            {
                                field: "StudentName",
                                title: "Hallgató neve"
                            },
                            {
                                field: "StudentNeptunCode",
                                title: "Hallgató neptunkódja",
                            },
                            {
                                field: "CourseName",
                                title: "Csoport neve",
                            },
                            {
                                command: [
                                    {
                                        name: "reject",
                                        click: reject,
                                        template : '<a role="button" class="k-button k-grid-reject"><span class="k-icon k-i-delete"></span>@localizer["RejectPendingBtn"]</a>'
                                    },
                                    {
                                        name: "approve",
                                        click: approve,
                                        template : '<a role="button" class="k-button k-button-icontext k-grid-approve"><span class="k-icon k-i-check"></span>@localizer["ApprovePendingBtn"]</a>'
                                    },
                                ],
                                title: "&nbsp;",
                                width: "30%"
                            },
                        ],
                        sortable: true,
                    }).data("kendoGrid");

                    function reject(e) {
                        e.preventDefault();
                        const data = this.dataItem($(e.currentTarget).closest("tr"));
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ProcessPendingStatus","Instructor")",
                            data: { id: data.UserCourseId, isApprove: false },
                            success: function () {
                                grid.dataSource.read();
                            },
                            error: function () {
                                console.log('Error.');
                            }
                        });
                    }

                    function approve(e) {
                        e.preventDefault();
                        const data = this.dataItem($(e.currentTarget).closest("tr"));
                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("ProcessPendingStatus","Instructor")",
                            data: { id: data.UserCourseId, isApprove: true },
                            success: function () {
                                grid.dataSource.read();
                            },
                            error: function () {
                                console.log('Error.');
                            }
                        });
                        grid.refresh();
                    }
                });
            </script>
        </div>
    </div>
</div>