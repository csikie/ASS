@{
    Layout = "_MainLayout";
}
@using Microsoft.AspNetCore.Mvc.ModelBinding

<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-lg-12">
            <h1>@localizer["CreatedSubjectsTitle"]</h1>
            <hr />
        </div>
        
        <div class="col-lg-12">
            <div id="subjectGrid"></div>
            <script>
                $(document).ready(function () {
                    const grid = $("#subjectGrid").kendoGrid({
                        dataSource: {
                            transport: {
                                read: {
                                    dataType: "json",
                                    url: "@Url.Action("GetSubjects","Admin")",
                                },
                                update: {
                                    url: "@Url.Action("UpdateSubject", "Admin",null,"https")",
                                    dataType: "json",
                                    type: "POST"
                                },
                                destroy: {
                                    url: "@Url.Action("DeleteSubject", "Admin",null,"https")",
                                    dataType: "json",
                                    type: "POST"
                                },
                                parameterMap: function (options, operation) {
                                    if (operation !== "read" && options.models) {
                                        return { models: kendo.stringify(options.models) };
                                    }
                                }
                            },
                            batch: true,
                            pageSize: 10,
                            schema: {
                                errors: "errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        SubjectName: { type: "string" },
                                        TeachersName: { type: "object" },
                                        Teachers: { type : "string" },
                                    },
                                },
                                parse: function (response) {
                                    response.forEach(function (data) {
                                        let str = "";
                                        data.TeachersName.forEach(function (teacher) {
                                            str += teacher.TeacherName + " (" + teacher.TeacherNeptun + ") ";
                                        })
                                        data.Teachers = str;
                                    })
                                    return response;
                                },
                            },
                            error: function (e) {
                                window.location.href = '/Home/Error/' + e.xhr.responseJSON.errors.reason;
                            },
                        },
                        pageable: {
                            refresh: true,
                            buttonCount : 5
                        },
                        toolbar: ["search"],
                        search: {
                            fields: ["SubjectName", "Teachers"]
                        },
                        height: 550,
                        columns: [
                            {
                                field: "SubjectName",
                                title: "@localizer["SubjectNameGridHeader"]"
                            },
                            {
                                field: "TeachersName",
                                title: "@localizer["TeachersnameGridHeader"]",
                                template: function (dataItem) {
                                    let teachers = "";
                                    dataItem.TeachersName.forEach(function (item) {
                                        teachers += item.TeacherName + " (" + item.TeacherNeptun + "), ";
                                    });
                                    return teachers.slice(0, -2);
                                },
                                editor: teachersNameMultiSelect,
                            },
                            {
                                command: ["edit" ,"destroy"],
                                title: "&nbsp;",
                            },
                        ],
                        editable: "inline",
                        sortable : true,
                    });
                }).data("kendoGrid");

                function teachersNameMultiSelect(container, options) {
                    $('<select id="multiselect" multiple="multiple" name="' + options.field + '"/>')
                        .appendTo(container)
                        .kendoMultiSelect({
                            dataTextField: "TeacherName",
                            dataValueField: "TeacherNeptun",
                            itemTemplate: '<span class="k-state-default">#: data.TeacherName # (#: data.TeacherNeptun #)</span>',
                            tagTemplate: '<span class="k-state-default">#: data.TeacherName # (#: data.TeacherNeptun #)</span>',
                            dataSource: {
                                transport: {
                                    read: {
                                        dataType: "json",
                                        url: "@Url.Action("GetTeachers", "Admin")"
                                    },
                                },
                                schema: {
                                    model: {
                                        id: "Id",
                                        fields: {
                                            TeacherName: { type: "string" },
                                            TeacherNeptun: { type: "string" }
                                        }
                                    }
                                }
                            },
                            value: options.model.TeachersName.toJSON()
                        });
                }
            </script>
        </div>
    </div>

    <div class="row justify-content-md-center pt-4">
        <div class="col-lg-12">
            <h2>@localizer["UsersTitle"]</h2>
            <hr />
        </div>
        <div class="col-lg-12">
            <div id="usersGrid"></div>
        </div>
        <script>
            $(document).ready(function () {
                $("#usersGrid").kendoGrid({
                    dataSource: {
                        transport: {
                            read: {
                                url: "@Url.Action("Read_UserGrid", "Admin")",
                                dataType: "json",
                            },
                            update: {
                                url: "@Url.Action("UpdateUser", "Admin",null,"https")",
                                dataType: "json",
                                type: "POST"
                            },
                            destroy: {
                                url: "@Url.Action("DeleteUser", "Admin",null,"https")",
                                dataType: "json",
                                type: "POST"
                            },
                            parameterMap: function (options, operation) {
                                if (operation !== "read" && options.models) {
                                    return { models: kendo.stringify(options.models) };
                                }
                            }
                        },
                        batch: true,
                        pageSize: 10,
                        schema: {
                            model: {
                                id: "Id",
                                fields: {
                                    RealName: { editable: false, type: "string"},
                                    UserName: { editable: false, type: "string"},
                                    Email: { editable: false, type: "string"},
                                    Roles: { editable: true, type: "object" },
                                    RolesParse: { editable: false, type : "string" }
                                },
                            },
                            parse: function (response) {
                                response.forEach((data) => {
                                    let roles;
                                    data.Roles.forEach((role) => {
                                        roles += role + " ";
                                    });
                                    data.RolesParse = roles;
                                });
                                return response;
                            },
                        },
                        error: function (e) {
                            window.location.href = '/Home/Error/' + e.xhr.responseJSON.errors.reason;
                        },
                    },
                    pageable: {
                            refresh: true,
                            buttonCount: 5
                    },
                    toolbar: ["search"],
                    search: {
                        fields: ["RealName", "UserName", "RolesParse", "Email"]
                    },
                    height: 550,
                    columns: [
                        {
                            field: "RealName",
                            title: "@localizer["RealNameGridHeader"]",
                        },
                        {
                            field: "UserName",
                            title: "@localizer["UserNameGridHeader"]"
                        },
                        {
                            field: "Email",
                            title: "@localizer["EmailGridHeader"]"
                        },
                        {
                            field: "Roles",
                            title: "@localizer["RolesGridHeader"]",
                            template: function (dataItem) {
                                let roles = "";
                                dataItem.Roles.forEach(function (item) {
                                    roles += item + ", ";
                                });
                                return roles.slice(0, -2);
                            },
                        },
                        {
                            template : "",
                            title: "&nbsp;",
                        },
                    ],
                });
            });
        </script>
    </div>
</div>